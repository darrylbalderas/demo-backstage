package main

import (
	"net/http"

	_ "github.com/darrylbalderas/demo-backstage/backstage-infra/apis/resources/docs" // docs is generated by Swag CLI, you have to import it.
	"github.com/gin-gonic/gin"

	// swagger embed files
	// gin-swagger middleware
	swaggerFiles "github.com/swaggo/files"     // swagger embed files
	ginSwagger "github.com/swaggo/gin-swagger" // gin-swagger middleware
)

type APIFrameworksResponse struct {
	APIFrameworks []string `json:"api_frameworks"`
}

// GetAPIFrameworks godoc
//
//	@Summary		Get ApiFrameworks
//	@Description	Get ApiFrameworks
//	@Tags			accounts
//	@Accept			json
//	@Produce		json
//	@Success		200	{object}	APIFrameworksResponse
//	@Router			/api-frameworks [get]
func GetAPIFrameworks(c *gin.Context) {
	c.JSON(http.StatusOK, APIFrameworksResponse{APIFrameworks: []string{
		"gin",
		"django",
		"fastapi",
		"spring",
	}})
}

type GroupsResponse struct {
	Groups []string `json:"groups"`
}

// GetGroups godoc
//
//	@Summary		GetGroups
//	@Description	GetGroups
//	@Tags			accounts
//	@Accept			json
//	@Produce		json
//	@Success		200	{object}	GroupsResponse
//	@Router			/groups [get]
func GetGroups(c *gin.Context) {
	c.JSON(http.StatusOK, GroupsResponse{Groups: []string{
		"groupA",
		"groupB",
	}})
}

type TeamsResponse struct {
	Teams []string `json:"teams"`
}

// GetTeams godoc
//
//	@Summary		GetTeams
//	@Description	GetTeams
//	@Tags			accounts
//	@Accept			json
//	@Produce		json
//	@Success		200	{object}	TeamsResponse
//	@Router			/teams [get]
func GetTeams(c *gin.Context) {
	c.JSON(http.StatusOK, TeamsResponse{Teams: []string{
		"teamA",
		"teamB",
		"teamC",
	}})
}

type UsersResponse struct {
	Users []string `json:"users"`
}

// GetUsers godoc
//
//	@Summary		GetUsers
//	@Description	GetUsers
//	@Tags			accounts
//	@Accept			json
//	@Produce		json
//	@Success		200	{object}	UsersResponse
//	@Router			/users [get]
func GetUsers(c *gin.Context) {
	c.JSON(http.StatusOK, UsersResponse{Users: []string{
		"userA",
		"userB",
		"userC",
		"userD",
		"userE",
		"userF",
	}})
}

type SystemsResponse struct {
	Systems []string `json:"systems"`
}

// GetSystems godoc
//
//	@Summary		GetSystems
//	@Description	GetSystems
//	@Tags			accounts
//	@Accept			json
//	@Produce		json
//	@Success		200	{object}	SystemsResponse
//	@Router			/systems [get]
func GetSystems(c *gin.Context) {
	c.JSON(http.StatusOK, SystemsResponse{Systems: []string{
		"data-ingestion",
		"ml-training",
		"cloud-platform",
		"analytics",
	}})
}

type ResourceTypesResponse struct {
	ResourceTypes []string `json:"resource_types"`
}

// GetResourceTypes godoc
//
//	@Summary		GetResourceTypes
//	@Description	GetResourceTypes
//	@Tags			accounts
//	@Accept			json
//	@Produce		json
//	@Success		200	{object}	ResourceTypesResponse
//	@Router			/resource-types [get]
func GetResourceTypes(c *gin.Context) {
	c.JSON(http.StatusOK, ResourceTypesResponse{ResourceTypes: []string{
		"aws-s3-bucket",
		"aws-sqs",
		"aws-rds-cluster",
	}})
}

func main() {
	r := gin.Default()
	r.GET("/api-frameworks", GetAPIFrameworks)
	r.GET("/groups", GetGroups)
	r.GET("/teams", GetTeams)
	r.GET("/users", GetUsers)
	r.GET("/systems", GetSystems)
	r.GET("/resource-types", GetResourceTypes)
	r.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler))
	r.Run() // listen and serve on 0.0.0.0:8080 (for windows "localhost:8080")
}
